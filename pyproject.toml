# pyproject.toml - 项目配置文件
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "novel-reading-app"
version = "1.0.0"
description = "小说阅读APP后端服务，支持AI翻译功能"
authors = [
    {name = "Novel Team", email = "dev@novelapp.com"},
]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy[asyncio]>=2.0.23",
    "asyncpg>=0.29.0",
    "alembic>=1.12.1",
    "redis>=5.0.1",
    "celery>=5.3.4",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "httpx>=0.25.2",
    "jinja2>=3.1.2",
    "loguru>=0.7.2",
    "python-dotenv>=1.0.0",
    "aiofiles>=23.2.1",
    "Pillow>=10.1.0",
    "email-validator>=2.1.0",
    "openai>=1.3.7",
    "anthropic>=0.7.8",
    "pytz>=2023.3",
    "requests>=2.31.0",
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "faker>=20.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "ipython>=8.17.2",
    "ipdb>=0.13.13",
]
prod = [
    "gunicorn>=21.2.0",
    "supervisor>=4.2.5",
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "orjson>=3.9.10",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["app"]
skip = ["migrations"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["tests.py", "test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = ["migrations/"]

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "redis.*",
    "alembic.*",
]
ignore_missing_imports = true

---

# .env.example - 环境变量示例文件
# 数据库配置
DATABASE_URL=postgresql+asyncpg://username:password@localhost:5432/novel_db
DATABASE_ECHO=false
DATABASE_POOL_SIZE=20
DATABASE_MAX_OVERFLOW=30

# Redis配置
REDIS_URL=redis://localhost:6379/0
REDIS_PASSWORD=
REDIS_DB=0

# JWT配置
JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=1440
JWT_REFRESH_TOKEN_EXPIRE_DAYS=7

# 应用配置
APP_NAME=小说阅读APP
APP_VERSION=1.0.0
DEBUG=true
API_V1_STR=/api/v1
SECRET_KEY=your-super-secret-key-change-in-production

# CORS配置
BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:8080"]

# 邮件配置
SMTP_TLS=true
SMTP_PORT=587
SMTP_HOST=smtp.gmail.com
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password

# 文件存储配置
UPLOAD_PATH=./static/uploads/
MAX_UPLOAD_SIZE=10485760
ALLOWED_EXTENSIONS=.jpg,.jpeg,.png,.gif,.webp

# AI模型配置
# DeepSeek配置
DEEPSEEK_API_KEY=your-deepseek-api-key
DEEPSEEK_BASE_URL=https://api.deepseek.com

# 智谱AI配置
ZHIPU_API_KEY=your-zhipu-api-key
ZHIPU_BASE_URL=https://open.bigmodel.cn/api/paas/v4/

# Ollama配置（本地模型）
OLLAMA_BASE_URL=http://localhost:11434

# Celery配置
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/2

# 日志配置
LOG_LEVEL=INFO
LOG_FILE=./logs/app.log

# 限流配置
RATE_LIMIT_ENABLED=true
RATE_LIMIT_PER_MINUTE=60

# 缓存配置
CACHE_TTL=3600
CACHE_ENABLED=true

# 翻译配置
TRANSLATION_ENABLED=true
TRANSLATION_DAILY_LIMIT=50
TRANSLATION_BATCH_SIZE=5

# 监控配置
SENTRY_DSN=
PROMETHEUS_ENABLED=false

---

# .gitignore - Git忽略文件
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# 项目特定
logs/
temp/
static/uploads/
*.db
*.sqlite
.DS_Store
.vscode/
.idea/

# 环境配置
.env.local
.env.production
.env.development